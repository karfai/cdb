--- voyage-hildon.py	2009-12-12 13:28:46.000000000 -0500
+++ voyage-hildon.py.o	2009-12-12 13:30:55.000000000 -0500
@@ -17,7 +17,7 @@
 
 import pygtk
 pygtk.require('2.0')
-import gtk
+import gtk, hildon
 
 import re, threading, Queue
 from datetime import *
@@ -52,7 +52,7 @@
         
     def run(self):
         self._store = schema.Schema()
-        while not self._e.is_set():
+        while not self._e.isSet():
             try:
                 m = self._q.get(False, 1)
                 if m is None:
@@ -402,7 +402,7 @@
 
 class InfoLabel(gtk.Label):
     def __init__(self, text):
-        gtk.Label.__init__(self, None)
+        gtk.Label.__init__(self, '')
         self.set_property('xalign', 0.0)
 
     def change_text(self, text):
@@ -452,14 +452,17 @@
         self.store_current()
         panel.stop_search()
 
-class Panel(gtk.Window):
+class Panel(hildon.Window):
     def __init__(self):
-        gtk.Window.__init__(self, gtk.WINDOW_TOPLEVEL)
+        hildon.Window.__init__(self)
 
         self.set_title('voyageur')
         self.set_icon_from_file('icon.png')
         self.set_border_width(6)
+
         self.connect('destroy', self.act_quit)
+        self.connect('key-press-event', self.act_key)
+        self.connect('window-state-event', self.act_state)
 
         self._ready_for_results = threading.Event()
         self._model = Model(self)
@@ -525,6 +528,19 @@
     def act_selection(self, sel):
         self.enable_exits()
 
+    def act_key(self, w, evt, *args):
+        if evt.keyval == gtk.keysyms.F6:
+            if self.window_in_fullscreen:
+                self.unfullscreen()
+            else:
+                self.fullscreen()
+
+    def act_state(self, w, evt, *args):
+        if evt.new_window_state & gtk.gdk.WINDOW_STATE_FULLSCREEN:
+            self.window_in_fullscreen = True
+        else:
+            self.window_in_fullscreen = False
+
     def get_query_text(self):
         return self._loc.get_active_text()
 
@@ -541,10 +557,13 @@
         self._list.get_model().clear()
         
     def disable(self):
+        self._ban = hildon.hildon_banner_show_animation(self, None, 'Updating')
+        self._ban.show()
         self._list.set_sensitive(False)
         self._info.set_sensitive(False)
 
     def enable(self):
+        self._ban.destroy()
         self._list.set_sensitive(True)
         self._info.set_sensitive(True)
 
@@ -623,6 +642,8 @@
         self._model.upcoming_stops_on_trip()
 
 gtk.gdk.threads_init()
+app = hildon.Program()
 w = Panel()
+app.add_window(w)
 w.refresh()
 gtk.main()
